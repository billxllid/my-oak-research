---
description: Vitest 单元测试规范（目录/Mock/覆盖率/React Testing Library/Prisma/SWR）
globs:
  - "tests/unit/**"
  - "packages/**"
  - "apps/web/**"
alwaysApply: true
---

# Oak Research - Vitest 单元测试规范

本规范统一单测框架、目录、Mock 策略与覆盖率要求，覆盖工具库、hooks、组件与服务层。

## 1. 目录组织

tests/unit/

- utils/ 工具函数
- hooks/ 自定义 hooks（SWR 等）
- components/ 纯展示组件
- services/ LLM 网关/RAG/Orchestrator 的轻量逻辑
- prisma/ 仓储层（如使用 repository 封装）

测试文件：`*.unit.spec.ts(x)`；被测文件旁可放 `__tests__` 以就近原则。

## 2. 测试框架与环境

- 使用 Vitest + jsdom（React 组件）
- 断言库 `expect`，配合 `@testing-library/react`
- 配置覆盖率阈值：语句/分支/函数/行 ≥ 80%（核心 utils ≥ 95%）

简要配置

```ts
// vitest.config.ts
import { defineConfig } from "vitest/config";
import react from "@vitejs/plugin-react";
export default defineConfig({
  plugins: [react()],
  test: {
    environment: "jsdom",
    setupFiles: ["tests/unit/setup.ts"],
    coverage: {
      reporter: ["text", "html"],
      lines: 0.8,
      functions: 0.8,
      branches: 0.8,
      statements: 0.8,
    },
  },
});
```

## 3. Mock 策略

- Prisma：使用 `vi.mock("@oak/prisma", () => ({ prisma: createPrismaMock() }))`
- LLM 网关与 RAG：`vi.mock("@oak/agents/llm-gateway")`，返回稳定 JSON
- SWR：对 fetcher 进行桩，或使用 `SWRConfig` 的 `provider` 注入内存缓存
- 时间：`vi.setSystemTime(new Date("2025-01-01T00:00:00Z"))`
- 随机：`vi.spyOn(globalThis.crypto, "getRandomValues").mock...` 保持稳定

## 4. 工具库（utils）测试

- 纯函数必须覆盖边界条件与错误路径
- lodash 依赖：按需导入不需 mock，但需验证行为一致与性能（可选）

```ts
import { groupBy } from "lodash";
import { stableId } from "@oak/utils/id";
```

## 5. Hooks 测试（SWR）

- 使用 `renderHook` + `SWRConfig` 包裹，注入测试 fetcher

```tsx
const wrapper = ({ children }) => (
  <SWRConfig
    value={{ provider: () => new Map(), dedupingInterval: 0, fetcher: fn }}
  >
    {children}
  </SWRConfig>
);
const { result } = renderHook(() => useFocusContent({ page: 1 }), { wrapper });
```

- 断言 loading → data → error 流程与重试行为

## 6. 组件测试（RTL）

- 仅测可视行为与可访问性：文本、按钮、状态切换
- 使用语义查询 `getByRole/getByText`，避免快照依赖样式
- 异步 UI 使用 `findBy*` 与 `await waitFor(...)`

示例

```tsx
render(<FocusCard title="A" summary="B" platform="Web" time="2025-01-01" />);
expect(screen.getByRole("button", { name: "收藏" })).toBeInTheDocument();
```

## 7. 服务/仓储测试

- Repository 层使用 in-memory/mocked Prisma
- LLM 与 RAG 只测试适配层（参数整形、Schema 校验），不测外部质量

## 8. 回归与边界

- 空数据/极端长度/非法输入/网络失败
- 乐观更新回滚、分页边界、游标缺失

## 9. 工具与覆盖率报告

- 输出 HTML 覆盖率报告到 `coverage/`
- CI 校验阈值，不达标即 fail
