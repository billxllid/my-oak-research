---
description: Server Actions 使用规范（目录/入参校验/鉴权/幂等/事务/缓存/错误处理/示例）
globs:
  - "apps/web/app/**"
  - "packages/**"
alwaysApply: true
---

# Oak Research - Server Actions 规范

本规范用于统一 Next.js 15 下 Server Actions 的组织、鉴权、校验、事务与缓存策略，确保 Actions 仅承载“近 UI 的安全服务端逻辑”，重业务逻辑放入 packages 层。

## 1. 目录与命名

- 每个 feature 路由下新建 `actions.ts` 导出 Server Actions：

```

apps/web/app/(focus-bulletin)/config/keywords/actions.ts
apps/web/app/(report-writer)/templates/actions.ts
apps/web/app/(library)/knowledge/actions.ts
apps/web/app/(admin)/users/actions.ts

```

- 命名使用动词短语：`createKeyword`, `updateTemplate`, `deleteUser`
- 复杂业务落到 `packages/*`（如 `@oak/agents`, `@oak/utils`, `@oak/prisma`），Action 仅调度与拼装返回

## 2. 基本约束

- 文件首行声明 `"use server"`
- 所有入参必须 Zod 校验；禁止 `any`
- 必须做鉴权与权限校验（依赖 `getSession()` / 角色）
- 返回统一 Envelope：`{ success, data?, error? }`
- 严格幂等：创建使用业务幂等键（如 hash/自然键）；更新需乐观锁或版本号

## 3. 入参/出参 Schema

- 在同文件或 `apps/web/app/_schemas.ts` 中声明 Zod

```ts
import { z } from "zod";

export const CreateKeywordDto = z.object({
  name: z.string().min(1).max(50),
  categoryId: z.string().uuid().optional(),
  derive: z.boolean().default(false),
});
export type TCreateKeywordDto = z.infer<typeof CreateKeywordDto>;
```

## 4. 鉴权与权限

- 通过 `getSession()` 获取 `userId/roles`
- 权限辅助：`assertPerm(roles, "focus:config")`，不满足抛业务异常
- 只在服务端执行，禁止在客户端直接引入敏感包（例如 Prisma client）

## 5. 事务与并发

- 涉及多表写入时使用 Prisma 事务 `prisma.$transaction()`
- 并发写入使用唯一索引或乐观锁字段（`version`/`updatedAt` 比对）
- 队列型任务（LLM/抓取）交给 worker，通过 `enqueueJob()` 下发

## 6. 缓存策略

- 只读 Action 可使用 `cache()` 包裹（注意用户隔离）
- 写操作完成后显式触发 React Query/路由段的 revalidate（`revalidatePath("/...")` 或 `revalidateTag("...")` 或 `queryClient.invalidateQueries()`）
- 列表页使用 tag 维度缓存，细粒度无侵入刷新

## 7. 错误处理

- 捕获 Zod 错误与业务异常，返回 `{ success:false, error:{ code,message,details } }`
- 禁止将异常直接抛给客户端；记录审计日志（不含敏感字段）
- 对外统一错误码：`BAD_REQUEST/UNAUTHORIZED/FORBIDDEN/NOT_FOUND/CONFLICT/INTERNAL`

## 8. 示例：关键词创建

```ts
"use server";

import { CreateKeywordDto } from "@/app/_schemas";
import { prisma } from "@oak/prisma";
import { getSession, assertPerm } from "@/app/_auth";
import { revalidatePath } from "next/cache";

export async function createKeyword(input: unknown) {
  const session = await getSession();
  if (!session)
    return {
      success: false,
      error: { code: "UNAUTHORIZED", message: "Login required" },
    };
  assertPerm(session.roles, "focus:config");

  const parse = CreateKeywordDto.safeParse(input);
  if (!parse.success)
    return {
      success: false,
      error: {
        code: "BAD_REQUEST",
        message: "Invalid payload",
        details: parse.error.flatten(),
      },
    };

  const { name, categoryId, derive } = parse.data;

  // 幂等：同名+分类唯一
  const exists = await prisma.keyword.findFirst({
    where: { name, categoryId: categoryId ?? null },
  });
  if (exists) return { success: true, data: exists };

  const created = await prisma.keyword.create({ data: { name, categoryId } });

  // 可选：派生交给队列
  if (derive) {
    // await enqueueJob("keyword-derive", { keywordId: created.id });
  }

  revalidatePath("/focus-bulletin/config/keywords");
  return { success: true, data: created };
}
```

## 9. UI 调用约定

- 客户端通过 `useTransition()` 包裹调用；按钮置 `pending` 状态
- 成功/失败均 toast；成功后刷新 React Query 或 `router.refresh()`（根据需要）
- 文件上传等长任务：只负责授权和创建任务，正文处理由 worker 完成

## 10. 测试

- 单测覆盖：鉴权失败、参数失败、幂等创建、正常创建、异常路径
- E2E：从页面触发 Action，断言页面刷新/列表变化
