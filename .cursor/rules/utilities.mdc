---
description: 全局工具库规范（lodash/日志/时间/URL/掩码/安全/ID/分页/错误/环境）
globs:
  - "packages/utils/**"
  - "apps/web/**"
  - "apps/worker/**"
alwaysApply: true
---

# Oak Research - Utilities 工具库规范

本规范定义 `packages/utils` 中可复用的纯函数集合，并规定 lodash 工具的使用方式，禁止在业务层重复造轮子或引入未优化的全量依赖。

## 1. 使用 lodash 工具函数

- **必须使用 lodash 提供的工具函数** 来简化常见数组、对象、字符串操作
- **必须按需导入**，避免全量打包膨胀

```ts
import groupBy from "lodash/groupBy";
import uniqBy from "lodash/uniqBy";
import debounce from "lodash/debounce";
```

- 优先使用 lodash 封装的 util，而不是手写常见逻辑（例如 `debounce`、`cloneDeep`、`groupBy` 等）
- 在工具库函数内调用 lodash 工具，而不是直接在页面或业务逻辑里滥用
- Cursor 在生成 util 相关代码时必须提示：优先从 lodash 单函数导入

## 2. 目录结构

```
packages/utils/
├── date.ts        // 时间与格式化
├── url.ts         // URL 安全与拼接
├── mask.ts        // 数据脱敏
├── id.ts          // ID/哈希/指纹
├── paginate.ts    // 分页与游标
├── error.ts       // 错误建模与映射
├── security.ts    // stripPromptLike/redact 等
├── logger.ts      // 日志封装
└── index.ts
```

## 3. 时间（date.ts）

- `formatDate(date, pattern="YYYY-MM-DD HH:mm:ss")`
- `fromRange({ from?: string, to?: string })` → `[Date|undefined, Date|undefined]`
- `relative(date)` → `x分钟前`，并带绝对时间 tooltip

## 4. URL（url.ts）

- `safeUrl(input)`：过滤危险协议（如 javascript:）
- `qs(object)`：安全拼接查询字符串
- `withParams(url, params)`：返回拼接后的新 URL

## 5. 脱敏（mask.ts）

- `maskEmail("a@b.com") => a***@b.com`
- `maskPhone("18812345678") => 188****5678`
- `maskId("A123456789") => A1******89`

## 6. ID/哈希（id.ts）

- `uuid()`：包装 `crypto.randomUUID()`
- `hash256(input)`：稳定哈希（去重/指纹）
- `stableId(parts: string[])`：拼接后哈希，用于幂等键

## 7. 分页（paginate.ts）

- `pageToSkip(page, limit)`：转换为 skip/take
- `buildMeta({ page, limit, total, durationMs, version })`
- `encodeCursor(obj) / decodeCursor(str)`：游标模式

## 8. 错误（error.ts）

- `asApiError(err, fallback="INTERNAL")`：统一错误封装
- `zodDetails(error)`：提取字段错误，返回给 API

## 9. 安全（security.ts）

- `stripPromptLike(text)`：移除提示注入模式，保留普通文本
- `redact(obj)`：递归删除 token/cookie/secret 字段
- `isSafeHost(url, whitelist?: string[])`：域名白名单校验

## 10. 日志（logger.ts）

- 提供 `info`, `warn`, `error`, `debug`
- 浏览器端 console 包装，Node 端写入 `SysLog`
- 自动附加 `requestId`、`durationMs`

## 11. 纯函数与测试

- 工具函数必须纯函数，不依赖全局状态
- 关键函数必须写 Vitest 单元测试（在 `__tests__` 下）
- 变更 util 必须审查影响范围

## 12. 使用约束

- 页面/业务逻辑禁止重复实现 lodash 已有功能
- 必须通过 `packages/utils` 暴露的封装函数来调用，而不是在页面随意拼写 util
- Cursor 在生成 util 相关代码时必须提示：

  - lodash 按需导入
  - 复用 `@oak/utils` 中已有函数

```

```
