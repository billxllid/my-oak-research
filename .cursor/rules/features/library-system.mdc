---
description: 资料库功能实现规范
globs:
  - "apps/web/app/(library)/**"
alwaysApply: true
---

# Oak Research - 资料库功能规范

本规则基于 Figma 原型设计，定义 **资料库** 模块的页面布局、交互逻辑和组件使用方式。

## 1. 功能结构

资料库包含两个核心子模块：

1. **知识库管理 (knowledge/)**
   - 管理用户上传的文档和知识库内容，支持搜索、上传、删除、编辑。
   - 上传文档会进行向量化，用于 RAG（检索增强生成）。
2. **收藏夹管理 (favorites/)**
   - 管理用户在「关注速报」收藏的情报内容。
   - 支持搜索、筛选、查看详情。

## 2. 路由规范

```
apps/web/app/(library)/
├── layout.tsx            # 子布局：左侧菜单 + 右侧内容
├── knowledge/            # 知识库管理
│   └── page.tsx
└── favorites/            # 收藏夹管理
└── page.tsx

```

## 3. 知识库管理布局规范

页面结构：

- 顶部：创建知识库按钮 + 搜索框
- 中部：知识库卡片列表
  - 卡片内容：标题、描述、更新时间
  - 卡片点击进入知识库详情页
- 右侧弹窗（或对话框）：新建/编辑知识库表单

表单字段：

- 知识库名称（必填，2–100 字符）
- 描述（可选，多行文本）
- 上传文档（支持 `.pdf .doc .docx .txt .md`，可拖拽上传）
- 向量模型选择（下拉框，默认值从配置读取）
- 最大切片长度（数字输入，推荐 200–2000）

上传逻辑：

- 上传文档后自动进行向量化，存入数据库/向量库
- 显示进度条，上传成功后 toast 提示

## 4. 收藏夹管理布局规范

页面结构：

- 顶部：搜索框 + 筛选（平台、时间范围）
- 中部：卡片列表（沿用关注内容卡片 `FocusCard` 组件）
- 点击卡片：打开详情页（Markdown 渲染 + Refer 信息 + 收藏标签）

卡片内容规范：

- 标题（来源文章标题 / 平台名）
- 摘要（Markdown 渲染，最多 3 行，超出折叠）
- 标签：相关人物 / 组织（Badge）
- 底部：时间 + 来源平台 + 收藏状态

详情页：

- 内容：完整 Markdown
- 底部：原始链接、截图、相关 Refer
- 操作按钮：取消收藏 / 导出

## 5. 数据交互逻辑

知识库管理：

- 获取知识库列表：`GET /api/library/knowledge`
- 创建知识库：`POST /api/library/knowledge`
- 更新知识库：`PUT /api/library/knowledge/:id`
- 删除知识库：`DELETE /api/library/knowledge/:id`
- 上传文档：`POST /api/library/knowledge/:id/upload`

收藏夹管理：

- 获取收藏内容：`GET /api/library/favorites`
- 添加收藏：由关注速报模块触发
- 移除收藏：`DELETE /api/library/favorites/:id`

数据获取：

- 所有接口统一用 **SWR**，支持分页与搜索
- 知识库上传文件时支持 **乐观更新**，UI 先插入占位卡片

## 6. 表单与校验

- 使用 React Hook Form + Zod
- 知识库名称：必填，2–100 字符
- 上传文件：校验格式、大小（默认 50MB 以下）
- 最大切片长度：范围限制 100–5000

示例表单（知识库新建）：

```tsx
<Form>
  <FormField name="name" control={form.control}>
    <Input placeholder="请输入知识库名称" />
  </FormField>
  <FormField name="description" control={form.control}>
    <Textarea placeholder="请输入描述" />
  </FormField>
  <FormField name="file" control={form.control}>
    <FileUpload accept=".pdf,.txt,.doc,.docx,.md" />
  </FormField>
  <FormField name="vectorModel" control={form.control}>
    <Select options={models} />
  </FormField>
  <FormField name="chunkSize" control={form.control}>
    <Input type="number" />
  </FormField>
  <Button type="submit">提交</Button>
</Form>
```

## 7. UI 组件规范

- **KnowledgeCard** → 知识库卡片组件
- **FocusCard** → 收藏夹卡片（复用关注内容）
- **MarkdownRenderer** → 用于详情页渲染
- **FileUpload** → 上传文件控件（拖拽 + 进度条）
- **ConfigTable**（如未来需要知识库表格）

## 8. 响应式要求

- 知识库卡片在大屏 `grid-cols-3`，中屏 `grid-cols-2`，小屏 `grid-cols-1`
- 收藏夹卡片与关注内容保持一致
- 上传文件区域在小屏幕显示为全宽

## 9. 开发约束

- 上传文件后必须调用后端 API 进行向量化，不允许前端 mock
- 收藏夹数据与关注速报保持一致性，操作必须触发全局更新
- 知识库数据必须存入数据库，并且索引到向量库
- Cursor 在生成代码时必须提示：复杂表单和文件上传组件请优先封装到 `packages/ui/` 再使用
