---
description: RAG 知识库实现规范
globs:
  - "packages/agents/**"
  - "apps/worker/pipelines/**"
  - "apps/web/app/(library)/knowledge/**"
alwaysApply: true
---

# Oak Research - RAG 知识库实现规范

本规则定义知识库的 RAG（Retrieval Augmented Generation）实现方式，确保用户上传的文档能够被正确向量化、存储和检索，以便在报告编写和情报分析中调用。

## 1. 功能目标

- 用户上传 PDF/Word/Excel/Markdown/TXT 文件
- 系统将文档内容切片并向量化，存入数据库或向量库
- LLM 在生成报告或回答时，可检索相关知识片段（RAG）进行增强
- 用户可管理知识库（新增、编辑、删除、搜索）

## 2. 数据流与处理流程

### 上传处理流程

1. **文件上传**

   - 支持 `.pdf .doc .docx .xlsx .md .txt`
   - 校验大小（默认 ≤ 50MB）

2. **文档解析**

   - PDF → `pdf-parse`
   - Word → `docx`
   - Excel → `xlsx` → 按 sheet/行解析为文本
   - Markdown/TXT → 直接读取

3. **文本切片**

   - 默认切片长度：500 tokens
   - 用户可在上传时配置（范围：200–2000）
   - 切片时保留文档元信息（文档名、页码/段落号）

4. **向量化**

   - 统一调用 `packages/agents/embeddings.ts`
   - 默认模型：`Doubao-embedding-240715`
   - 结果存储到向量库（Postgres + pgvector 或外部 Milvus/Weaviate）

5. **存储**
   - 原始文档存储在数据库（Prisma: `Knowledge` 表）
   - 向量化片段存储在 `KnowledgeChunk` 表 + 向量库

### 检索流程

1. 用户输入查询（如“俄乌战争外交动向”）
2. 将查询转为向量
3. 在向量库中相似度检索（Top-K，默认 5–10 条）
4. 结果传给 LLM，与用户提示词一起生成最终回答/报告

## 3. 数据模型 (Prisma Schema)

```prisma
model Knowledge {
  id          String   @id @default(uuid())
  name        String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  chunks      KnowledgeChunk[]
}

model KnowledgeChunk {
  id          String   @id @default(uuid())
  knowledgeId String
  content     String
  embedding   Vector   // pgvector
  metadata    Json
  createdAt   DateTime @default(now())
  Knowledge   Knowledge @relation(fields: [knowledgeId], references: [id])
}
```

## 4. API 设计

知识库管理：

- `GET /api/library/knowledge` → 获取知识库列表
- `POST /api/library/knowledge` → 创建知识库（名称/描述）
- `PUT /api/library/knowledge/:id` → 编辑知识库
- `DELETE /api/library/knowledge/:id` → 删除知识库

文件上传与处理：

- `POST /api/library/knowledge/:id/upload`
- 请求体：文件 + 向量化配置（模型、切片长度）
- 响应：处理进度与结果

检索接口：

- `POST /api/library/retrieve`
- 请求体：`{ query: string, knowledgeIds?: string[], topK?: number }`
- 响应：相关片段（带 content + metadata）

## 5. 前端交互规范

知识库管理页面：

- 顶部：创建知识库按钮 + 搜索框
- 中部：卡片列表（名称、描述、更新时间）
- 详情页：显示知识库的已上传文件和切片数

上传弹窗：

- 字段：文件上传、向量化模型、最大切片长度
- 上传进度条（%）
- 成功后 toast 提示

## 6. 检索增强生成（RAG）

- 前端调用 `/api/library/retrieve` 获取相关片段
- 结果传入 LLM Gateway → 拼接到用户提示词前
- Prompt 模板示例：

```
你是一个情报分析助手。请基于以下知识片段回答问题：
<KNOWLEDGE>
{{retrieved_chunks}}
</KNOWLEDGE>
问题：{{user_query}}
```

## 7. UI 组件规范

- **KnowledgeCard** → 知识库卡片（名称、描述、更新时间）
- **FileUpload** → 文件上传控件（支持拖拽 + 进度条）
- **ChunkList**（可选）→ 展示切片预览
- **SearchBar** → 知识库检索输入框

## 8. 开发约束

- 向量化必须走统一的 `packages/agents/embeddings.ts`，不可直接调用模型 API
- 向量库与数据库保持一致性，删除知识库时必须级联删除向量
- Cursor 在生成代码时必须提示：检索与生成逻辑写在 `apps/worker/pipelines/rag.ts`
- RAG 结果必须附带 metadata（来源文档名、页码/段落）供追溯
