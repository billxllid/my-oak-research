---
description: 内容分析与摘要生成规范
globs:
  - "packages/agents/**"
  - "apps/worker/pipelines/**"
alwaysApply: true
---

# Oak Research - 内容分析与摘要生成规范

本规则定义了系统如何对爬取的原始内容进行清洗、去重、摘要生成与 Markdown 格式化，以便前端展示和报告编写。

## 1. 功能目标

- 将抓取的网页/平台内容（HTML、JSON、文本）转化为 **可读 Markdown**
- 自动提取标题、摘要、作者、时间、来源平台、内容类型等元信息
- 支持去重，避免重复显示相同内容
- 摘要必须简明，突出与关注关键词的相关性

## 2. 内容清洗流程

原始内容（HTML/JSON/文本）经过以下步骤处理：

1. **格式解析**

   - 网页：提取 `<title>`、正文 `<p>` 标签
   - 客户端/接口：解析 JSON 字段（如 title、body）
   - 暗网文本：直接按段落切分

2. **噪音去除**

   - 去掉广告、导航、无关链接
   - 清除 HTML 标签，只保留正文

3. **去重处理**
   - 同一平台、相同标题+正文 hash → 只保留一条
   - 高相似度（相似度 ≥ 90%）的文本进行合并

## 3. 摘要生成

- 调用 AI 模型生成摘要（走 LLM Gateway）
- 输入：正文（最多 2000 token）+ 关注关键词上下文
- 输出：100–200 字摘要，需解释「为何该内容与关键词相关」

示例 Prompt：

```

请阅读以下内容，并用 2–3 句话总结其要点。强调其中与关键词
“俄乌战争” 相关的部分，说明其对分析的价值。

```

摘要必须通过 Zod 校验：

```ts
const SummarySchema = z.object({
  summary: z.string().min(30).max(400),
  relevance: z.boolean(),
});
```

## 4. 元信息提取

自动提取并存储以下字段：

- 标题（若无，取前 20 字摘要作为标题）
- 作者（若存在）
- 时间（正文时间或爬取时间）
- 来源平台（微博、Github、暗网等）
- 内容类型（网页、客户端、暗网）
- 相关关键词（由系统匹配 + AI 补充）
- 人物/组织标签（命名实体识别）

## 5. Markdown 格式化

最终内容统一转化为 Markdown：

- 一级标题：文章标题
- 二级标题：摘要（AI 生成）
- 正文：清洗后的文本，按段落分行
- 附录：Refer 信息（原始链接、截图、抓取时间、平台）

示例：

```md
# 乌克兰战事升级

## 摘要

俄乌战争中，俄罗斯军队于 2025-07-31 在哈尔科夫发动新一轮攻势。
该事件与关键词“俄乌战争”高度相关。

## 正文

...内容...

---

**来源**: [原始链接](https://example.com)  
**平台**: Twitter  
**时间**: 2025-07-31 10:10:10
```

## 6. 数据交互规范

- API 路由：

  - 内容清洗 → `POST /api/content/clean`
  - 摘要生成 → `POST /api/content/summary`
  - 存储结果 → `POST /api/content/store`

- 返回数据结构：

  ```json
  {
    "id": "uuid",
    "title": "乌克兰战事升级",
    "summary": "俄乌战争中...",
    "contentMarkdown": "...",
    "meta": {
      "author": "xxx",
      "time": "2025-07-31T10:10:10Z",
      "platform": "Twitter",
      "type": "web",
      "keywords": ["俄乌战争"],
      "entities": {
        "persons": ["泽连斯基"],
        "orgs": ["乌克兰军队"]
      }
    }
  }
  ```

## 7. UI 展示约束

- **卡片视图**

  - 标题 → `<CardTitle>`
  - 摘要 → `<CardContent>`（最多 3 行，超出折叠）
  - 标签 → `<Badge>` 显示关键词/人物/组织
  - 底部 → 时间 + 平台 + 收藏按钮

- **详情页**

  - 完整 Markdown 渲染
  - Refer 信息置于底部

## 8. 开发约束

- AI 摘要必须走统一 LLM Gateway
- 去重逻辑必须放在 worker pipeline，不允许前端做过滤
- Markdown 渲染必须复用 `packages/ui/markdown/MarkdownRenderer`
- Cursor 在生成 pipeline 代码时必须提示：内容处理逻辑写在 `apps/worker/pipelines/content-analysis.ts`
