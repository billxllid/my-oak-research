---
description: Prisma 数据模型设计规范（命名/关系/索引/审计字段/多环境/示例）
globs:
  - "packages/prisma/**"
  - "apps/worker/**"
  - "apps/web/**"
alwaysApply: true
---

# Oak Research - Prisma 数据模型规范

本规范统一 Prisma Schema 的命名、关系、索引、审计字段、软删除与多环境生成策略，确保前后端类型一致与查询性能稳定。

## 1. 命名与基础类型

- 模型名使用 PascalCase：`User`, `Report`, `Content`
- 字段名 camelCase：`createdAt`, `updatedAt`, `userId`
- 主键：`id String @id @default(uuid())`
- 时间：`createdAt DateTime @default(now())`，`updatedAt DateTime @updatedAt`
- 软删除：统一 `deletedAt DateTime?`（默认 null 表示有效）
- 枚举使用 PascalCase 值：`enum Platform { Web Client Darknet }`

## 2. 审计与多租户（如需）

- 审计字段：`createdBy String?`, `updatedBy String?`
- 需要多租户时增加 `tenantId String` 并在查询端默认加作用域

## 3. 索引与唯一约束

- 外键常用索引：`@@index([userId])`
- 组合唯一：例如关键词在分类下唯一 `@@unique([name, categoryId], map: "uk_keyword_name_category")`
- 高频筛选字段建立索引：`platform`, `time`, `type`

## 4. 关系与删除策略

- 所有关系显式声明 `@relation`
- 级联删除谨慎使用，通常改为软删除 + worker 清理
- `onDelete: SetNull` 优先，避免误删

## 5. 主要模型建议（与功能对齐）

```prisma
// 用户与权限
model User {
  id        String   @id @default(uuid())
  username  String   @unique
  hash      String
  roleId    String?
  role      Role?    @relation(fields: [roleId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deletedAt DateTime?
}

model Role {
  id        String   @id @default(uuid())
  name      String   @unique
  desc      String?
  users     User[]
  perms     RolePerm[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model RolePerm {
  id        String   @id @default(uuid())
  roleId    String
  perm      String   // e.g. "focus:config", "report:write"
  role      Role     @relation(fields: [roleId], references: [id], onDelete: Cascade)
  @@unique([roleId, perm], map: "uk_role_perm")
}

// 关注设置：关键词/派生/分类/平台/站点/搜索引擎/代理
model Category {
  id        String   @id @default(uuid())
  name      String
  desc      String?
  keywords  Keyword[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@unique([name], map: "uk_category_name")
}

model Keyword {
  id          String           @id @default(uuid())
  name        String
  categoryId  String?
  category    Category?        @relation(fields: [categoryId], references: [id])
  derived     DerivedKeyword[]
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  @@unique([name, categoryId], map: "uk_keyword_name_category")
}

model DerivedKeyword {
  id        String   @id @default(uuid())
  keywordId String
  lang      String   // "zh","en","ja","ko","de","fr"
  value     String
  keyword   Keyword  @relation(fields: [keywordId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@unique([keywordId, lang, value], map: "uk_derived_lang_value")
}

enum PlatformType {
  Web
  Client
  Darknet
}

model Platform {
  id        String       @id @default(uuid())
  name      String       @unique
  type      PlatformType
  params    Json?        // 认证/Headers 等，后端加密存储
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
}

model Site {
  id        String   @id @default(uuid())
  host      String   @unique
  label     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model SearchEngine {
  id        String   @id @default(uuid())
  name      String   @unique
  baseUrl   String
  params    Json?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ProxyResource {
  id        String   @id @default(uuid())
  label     String
  endpoint  String   // ip:port 或 http(s)://...
  region    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@index([region])
}

// 关注内容（清洗后）
enum ContentType {
  Web
  Client
  Darknet
}

model Content {
  id        String      @id @default(uuid())
  title     String
  summary   String
  markdown  String      // 清洗后的 Markdown
  platform  String
  type      ContentType
  time      DateTime    // 文章/发现时间
  url       String?
  meta      Json?
  keywords  ContentKeyword[]
  entities  ContentEntity?
  favoredBy Favorite[]
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  @@index([platform, time])
  @@index([type, time])
}

model ContentKeyword {
  id        String   @id @default(uuid())
  contentId String
  keywordId String
  content   Content  @relation(fields: [contentId], references: [id], onDelete: Cascade)
  keyword   Keyword  @relation(fields: [keywordId], references: [id], onDelete: Cascade)
  @@unique([contentId, keywordId], map: "uk_content_keyword")
}

model ContentEntity {
  id        String   @id @default(uuid())
  contentId String   @unique
  persons   String[] // string[] 提取后的人名
  orgs      String[]
  locations String[]
  content   Content  @relation(fields: [contentId], references: [id], onDelete: Cascade)
}

// 收藏
model Favorite {
  id        String   @id @default(uuid())
  userId    String
  contentId String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  content   Content  @relation(fields: [contentId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  @@unique([userId, contentId], map: "uk_fav_user_content")
  @@index([userId, createdAt])
}

// 资料库与向量
model Knowledge {
  id          String           @id @default(uuid())
  name        String
  description String?
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  chunks      KnowledgeChunk[]
  @@unique([name], map: "uk_knowledge_name")
}

model KnowledgeChunk {
  id          String   @id @default(uuid())
  knowledgeId String
  content     String
  embedding   Bytes    // pgvector: use extension or vector type via provider config
  metadata    Json
  createdAt   DateTime @default(now())
  Knowledge   Knowledge @relation(fields: [knowledgeId], references: [id], onDelete: Cascade)
  @@index([knowledgeId])
}

// 报告与模板
model Template {
  id        String   @id @default(uuid())
  name      String   @unique
  category  String?
  content   String   // Markdown 模板
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Report {
  id         String   @id @default(uuid())
  title      String
  templateId String?
  content    String   // Markdown
  version    Int      @default(1)
  authorId   String
  template   Template? @relation(fields: [templateId], references: [id])
  author     User     @relation(fields: [authorId], references: [id])
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  @@index([authorId, createdAt])
}

// 日志
model SysLog {
  id        String   @id @default(uuid())
  level     String   // info/warn/error
  module    String
  message   String
  meta      Json?
  createdAt DateTime @default(now())
  @@index([module, createdAt])
}

model ActionLog {
  id        String   @id @default(uuid())
  userId    String?
  action    String
  targetId  String?
  details   Json?
  createdAt DateTime @default(now())
  user      User?    @relation(fields: [userId], references: [id])
  @@index([action, createdAt])
}
```

## 6. 生成与多环境

- `datasource db` 使用 `postgresql`，建议开启 `pgvector`
- 通过 `generator client { previewFeatures = ["metrics"] }`（按需）
- `prisma generate` 放在根脚本，client 导出在 `packages/prisma/index.ts`

## 7. 查询与性能

- 时间范围查询统一走 `time` 或 `createdAt`
- 列表一律 `take` 限制 ≤ 100
- 高频 JOIN 前置建立索引（如 `contentId`, `keywordId`）
- 大文本字段（`markdown`, `content`）避免在列表投影里查询（`select` 精简）

## 8. 约束与代码审查

- 新增模型必须带：主键、审计字段、必要索引
- 关系需明确 `onDelete` 策略
- 变更 Schema 需附 migration 说明与回滚策略
