---
description: 多 Agent 协作规范
globs:
  - "packages/agents/**"
  - "apps/worker/pipelines/**"
alwaysApply: true
---

# Oak Research - 多 Agent 协作规范

本规则定义 **多 Agent 协作** 的架构和实现规范，确保系统能够在不同任务（检索、分析、生成）间进行分工与协调。

## 1. 设计目标

- 每个 Agent 专注于一个子任务（检索、清洗、分析、摘要、推理等）
- Orchestrator 统一调度多个 Agent，管理输入/输出流
- 支持任务链（Sequential）和并行任务（Parallel）的组合
- 支持错误恢复与重试机制，避免单个 Agent 出错导致流程中断

## 2. Agent 类型

### KeywordAgent

- 输入：用户配置的关键词（及派生关键词）
- 输出：标准化关键词列表（多语言、多表述）
- 使用场景：关注速报检索

### FetchAgent

- 输入：关键词 + 平台配置
- 输出：原始内容（HTML/JSON/文本）
- 能力：调用爬虫/搜索引擎 API

### CleanAgent

- 输入：原始内容
- 输出：清洗后的文本（纯净 Markdown-ready）
- 能力：去重、过滤噪音

### AnalysisAgent

- 输入：清洗后的文本 + 关注关键词
- 输出：摘要（100–200 字）+ 元信息（时间、平台、作者、类型）
- 能力：调用 LLM，强调内容与关键词的相关性

### EntityAgent

- 输入：清洗后的文本
- 输出：命名实体（人物、组织、地点）
- 能力：NER 模型/LLM 提取

### ReportAgent

- 输入：素材（摘要+实体+Markdown）+ 模板
- 输出：完整报告草稿
- 能力：调用 LLM 进行长文档生成

## 3. Orchestration 模式

### Sequential Pipeline

- 顺序执行：`KeywordAgent → FetchAgent → CleanAgent → AnalysisAgent → EntityAgent`
- 用于「关注速报」定时任务

### Parallel Processing

- FetchAgent 可并行抓取多个平台
- AnalysisAgent 与 EntityAgent 可并行执行，结果在 Orchestrator 中合并

### Mixed Flow

- 报告编写流程：
  - 前置：RAG 检索 → 素材准备
  - 并行：AnalysisAgent + EntityAgent
  - 后置：ReportAgent 生成报告

## 4. Orchestrator 规范

- Orchestrator 统一由 `packages/agents/orchestrator.ts` 实现
- 功能：
  - 接收任务定义（DAG / Pipeline）
  - 调度各 Agent 执行
  - 收集中间结果，传递给下游 Agent
  - 处理错误：单 Agent 出错 → 重试（最多 3 次），失败则记录日志并跳过
  - 输出最终结果

示例调用：

```ts
import { orchestrator } from "@oak/agents/orchestrator";

const result = await orchestrator.run("focusBulletinPipeline", {
  keyword: "俄乌战争",
  platforms: ["twitter", "weibo"],
});
```

## 5. 数据结构规范

所有 Agent 输入输出必须符合统一格式：

```ts
interface AgentInput {
  id: string; // 任务 ID
  payload: any; // 输入数据
  context?: object; // 上下文信息
}

interface AgentOutput {
  id: string; // 任务 ID
  success: boolean; // 执行是否成功
  data: any; // 输出数据
  error?: string; // 错误信息
  meta?: object; // 附加元信息
}
```

## 6. 任务定义与配置

任务链配置放在 `apps/worker/pipelines/`，例如：

- `focus-bulletin.ts` → 关注速报流水线
- `report-writer.ts` → 报告编写流水线
- `rag.ts` → 知识库检索增强流水线

配置示例：

```ts
export const focusBulletinPipeline = [
  "KeywordAgent",
  "FetchAgent",
  "CleanAgent",
  ["AnalysisAgent", "EntityAgent"], // 并行
];
```

## 7. 日志与监控

- 每个 Agent 执行必须记录日志（开始、完成、错误）
- Orchestrator 输出执行报告：执行链路 + 耗时统计 + 错误统计
- 日志存入数据库，并可在系统管理 → 日志模块查看

## 8. 开发约束

- 所有 LLM 调用必须走统一 LLM Gateway，不允许直接调用 API
- Agent 必须无状态，可复用（输入决定输出，不依赖全局变量）
- Cursor 在生成代码时必须提示：

  - Agent 实现放在 `packages/agents/`
  - Orchestrator 流程定义放在 `apps/worker/pipelines/`
