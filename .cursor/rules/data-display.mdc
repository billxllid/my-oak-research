---
description: 数据展示组件规范（卡片/表格/列表/详情/空态骨架/可访问性/性能）
globs:
  - "packages/ui/**"
  - "apps/web/app/**"
alwaysApply: true
---

# Oak Research - 数据展示组件规范

本规范统一前端的数据展示形态：卡片、表格、列表、详情视图，以及空态/骨架、可访问性与性能策略。所有组件优先从 `packages/ui` 引入与复用。

## 1. 组件基线

所有展示组件需满足以下基线

- 视觉统一：Shadcn UI + Tailwind，圆角 `rounded-2xl`，阴影 `shadow-md` 或 `shadow-sm`（列表内用更轻的阴影）
- 信息密度：标题（必要）+ 次级信息（标签/平台/时间）+ 主体摘要/表格行
- 交互 affordance：可点击区域需提供 `hover:bg-muted` 与焦点环 `focus-visible:outline`
- 可访问性：为可点击容器设置 `role="button"` 与 `aria-label`，关键文本 `aria-live="polite"`
- 响应式：大屏网格/双栏，小屏单列；表格在窄屏自动转卡片

## 2. 卡片组件（Cards）

统一在 `packages/ui/card/` 下提供以下卡片

- FocusCard：关注内容卡片（摘要、标签、时间、平台、收藏按钮）
- KnowledgeCard：知识库卡片（名称、描述、更新时间、条目数可选）
- ReportCard：报告卡片（标题、模板、创建/更新时间、状态）
- StatCard：仪表盘统计卡（关键词、数量、趋势箭头）

FocusCard 结构

```tsx
<Card className="rounded-2xl shadow-md h-full hover:shadow-lg transition">
  <CardHeader className="space-y-1">
    <CardTitle className="line-clamp-1">{title}</CardTitle>
    <div className="flex flex-wrap gap-2">
      {persons?.map((p) => (
        <Badge key={p} variant="secondary">
          {p}
        </Badge>
      ))}
      {orgs?.map((o) => (
        <Badge key={o}>{o}</Badge>
      ))}
    </div>
  </CardHeader>
  <CardContent>
    <MarkdownRenderer content={summary} clampLines={3} collapsible />
  </CardContent>
  <CardFooter className="flex items-center justify-between text-xs text-muted-foreground">
    <div className="flex items-center gap-2">
      <Badge variant="outline">{platform}</Badge>
      <span>{time}</span>
    </div>
    <Button variant="ghost" size="icon" aria-label="收藏">
      <Bookmark />
    </Button>
  </CardFooter>
</Card>
```

规范

- 标题最多一行 `line-clamp-1`，摘要默认 3 行折叠
- 标签使用 Shadcn `<Badge />`，数量>8 时折叠为 “+N”
- 收藏按钮在 `CardFooter` 右侧，使用 `variant="ghost"`，触发乐观更新

知识库/报告卡片仅在内容字段不同，外观保持一致；将共享的容器抽象为 `BaseCard`

## 3. 表格（DataTable）

统一表格封装在 `packages/ui/table/DataTable.tsx`，基于 Shadcn `<Table />`，支持

- 排序：列头排序指示
- 分页：底部分页器（页码/页大小），键盘可访问
- 选择：多选行（可选）
- 空态：在无数据时展示空态（见第 6 节）
- 密度切换：紧凑/默认密度
- 窄屏自适应：转“卡片行”显示

列定义示例

```ts
export const columns: ColumnDef<Row>[] = [
  {
    accessorKey: "id",
    header: "ID",
    cell: ({ getValue }) => <Mono>{getValue<string>()}</Mono>,
  },
  {
    accessorKey: "name",
    header: "名称",
    cell: ({ row }) => <span className="font-medium">{row.original.name}</span>,
  },
  {
    accessorKey: "role",
    header: "角色",
    cell: ({ getValue }) => <Badge>{getValue<string>()}</Badge>,
  },
  {
    id: "actions",
    header: "操作",
    cell: ({ row }) => <RowActions id={row.original.id} />,
  },
];
```

分页器约定

- 左侧显示总数与当前范围：`第 21–40 条，共 520 条`
- 右侧：页大小选择（10/20/50/100）+ 上一页/下一页
- 支持键盘：`← →` 切页，控件 `tabIndex=0`

窄屏卡片行

- 每行转为 `<Card>` 容器，列转为 `label: value` 堆叠
- `aria-labelledby` 指向行主标题

## 4. 列表（List）与虚拟滚动

对海量条目采用虚拟列表（未来可接入 `react-virtuoso`），当前实现

- `<VerticalList>`：提供可滚动容器，子项为卡片或行
- 支持 `renderItem` 与 `itemKey`，在分页/瀑布流场景复用
- 列表项间距 `gap-3`，小屏 `gap-2`

## 5. 详情视图（Detail / Drawer / Modal）

统一详情视图容器在 `packages/ui/detail/`

- `<DetailDrawer>`：从右侧抽屉打开，宽度 `w-[720px]`（lg），小屏 `w-full`
- `<DetailModal>`：居中模态
- 标准布局

  - 头部：标题 + 次级信息（平台/时间/来源）
  - 主体：`<MarkdownRenderer>` 渲染正文
  - 底部：Refer（原始链接、截图、抓取时间、来源 URL hash）

- 支持操作区：收藏/导出/复制链接
- 详情可选 tabs：`概览 | 引用 | 原文截图`

示例

```tsx
<DetailDrawer
  open={open}
  onOpenChange={setOpen}
  title={title}
  subtitle={`${platform} · ${time}`}
>
  <MarkdownRenderer content={markdown} />
  <Divider />
  <ReferList items={refs} />
</DetailDrawer>
```

## 6. 空态与骨架（Empty / Skeleton）

空态组件在 `packages/ui/empty/`

- `<Empty title="暂无数据" description="试试更换筛选条件或稍后再试" action={<Button>清空筛选</Button>} />`
- 图标采用 lucide（如 `Inbox`/`SearchX`）

骨架屏在 `packages/ui/skeleton/`

- `SkeletonCard`：卡片骨架，标题+三行文本
- `SkeletonTable`：表格骨架，列头+5 行
- `SkeletonList`：列表骨架，10 行条目

使用规范

- 加载请求>300ms 显示骨架
- 空数组时显示空态，不显示骨架
- 失败时显示错误组件，不混淆为空态

## 7. 标签、头像与元信息

标签

- 使用 `<Badge>` 显示平台/类型/状态；状态色

  - 成功 `success`，警告 `warning`，错误 `destructive`，信息 `secondary`

头像与来源

- `<Avatar>` 显示作者/平台图标
- 时间使用相对时间（`x分钟前`）与绝对时间 tooltip（`YYYY-MM-DD HH:mm:ss`）

## 8. 交互与可访问性

焦点管理

- 卡片与列表项支持键盘 `Enter/Space` 打开详情
- 操作按钮包含 `aria-label`，图标旁隐藏文本 `<span className="sr-only">收藏</span>`

可读性

- 长文本断行 `break-words`
- 最小点击面积 40×40
- 颜色对比度遵循 WCAG AA

## 9. 性能与占位

性能策略

- 大列表懒加载图片与代码高亮（在 `MarkdownRenderer` 内按需加载）
- 图表区块使用动态 import（`ssr: false`）与 `Suspense` 占位
- 组件 memo：对纯展示组件使用 `memo`，列表项 `key` 稳定

占位与渐进增强

- 优先首屏渲染主干信息（标题、平台、时间）
- 次要信息（实体标签、引用）在空闲回合加载

## 10. 数据绑定与状态

- 展示组件尽量无状态（从父传 props），避免在组件内发起请求
- 列表/表格接受 `data`、`loading`、`error` 三态
- 详情视图接受完整 `record` 或 `id` + 上层异步加载

## 11. 颜色与主题

- 主题继承全局 Tailwind 变量
- 深色模式：卡片背景 `bg-card`，文本 `text-card-foreground`，边框 `border-border`
- 趋势色：上升 `text-green-600`，下降 `text-red-600`，持平 `text-muted-foreground`

## 12. 代码片段与导出

统一导出入口

```ts
// packages/ui/index.ts
export * from "./card/FocusCard";
export * from "./card/KnowledgeCard";
export * from "./card/ReportCard";
export * from "./card/StatCard";
export * from "./table/DataTable";
export * from "./detail/DetailDrawer";
export * from "./detail/DetailModal";
export * from "./skeleton";
export * from "./empty";
```

## 13. 示例组合（关注内容页）

```tsx
function FocusGrid({ items, loading, error }) {
  if (loading) return <SkeletonList count={9} variant="card" />;
  if (error)
    return <Empty title="加载失败" description="请稍后重试或检查网络" />;
  if (!items?.length)
    return (
      <Empty title="暂无关注内容" description="尝试扩大关键词或更改筛选条件" />
    );

  return (
    <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
      {items.map((it) => (
        <FocusCard
          key={it.id}
          title={it.title}
          persons={it.entities?.persons}
          orgs={it.entities?.orgs}
          summary={it.summary}
          platform={it.platform}
          time={it.time}
          favored={it.favored}
          onToggleFavorite={() => toggleFav(it.id, !it.favored)}
          onOpen={() => openDetail(it.id)}
        />
      ))}
    </div>
  );
}
```

## 14. 视觉一致性检查表

- 卡片内边距：`p-4`（小屏）/ `p-6`（大屏）
- 网格间距：`gap-4`（大屏）/ `gap-3`（中等）/ `gap-2`（小屏）
- 标题字号：卡片 `text-base md:text-lg`，详情 `text-xl md:text-2xl`
- 行高：正文 `leading-relaxed`
- 截断：标题 `line-clamp-1`，摘要 `line-clamp-3`

## 15. 开发约束

- 禁止在页面内重复造轮子：优先引入 `packages/ui` 中已有组件
- 表格必须使用 `DataTable` 封装，不直接写 `<table>`
- Markdown 内容必须使用 `MarkdownRenderer`
- 任何新增展示组件需在 `packages/ui/index.ts` 统一导出，并在 PR 中附带 Story 或示例
