---
description: Shadcn UI 组件与 Tailwind 整合规范（主题/样式/组件复用/响应式设计）
globs:
  - "app/**"
  - "components/**"
alwaysApply: true
---

# Oak Research - Shadcn UI 组件与 Tailwind 整合规范

本规范统一 Shadcn UI 组件库的使用方式、主题配置、样式扩展与响应式设计策略。

## 1. 组件库基础

- 所有 UI 组件优先从 `@/components/ui` 引入
- 禁止重复造轮子，新组件前先检查 Shadcn 是否已提供
- 组件扩展放在 `components/` 目录下，保持原有 Shadcn 组件不变

## 2. 主题与配置

### CSS 变量系统

```css
:root {
  --background: 0 0% 100%;
  --foreground: 222.2 84% 4.9%;
  --card: 0 0% 100%;
  --card-foreground: 222.2 84% 4.9%;
  --popover: 0 0% 100%;
  --popover-foreground: 222.2 84% 4.9%;
  --primary: 222.2 47.4% 11.2%;
  --primary-foreground: 210 40% 98%;
  --secondary: 210 40% 96%;
  --secondary-foreground: 222.2 84% 4.9%;
  --muted: 210 40% 96%;
  --muted-foreground: 215.4 16.3% 46.9%;
  --accent: 210 40% 96%;
  --accent-foreground: 222.2 84% 4.9%;
  --destructive: 0 84.2% 60.2%;
  --destructive-foreground: 210 40% 98%;
  --border: 214.3 31.8% 91.4%;
  --input: 214.3 31.8% 91.4%;
  --ring: 222.2 84% 4.9%;
  --radius: 0.5rem;
}
```

### 深色模式支持

- 使用 `next-themes` 管理主题切换
- 所有组件必须支持 `dark:` 变体
- 主题切换不影响布局和功能

## 3. 组件使用规范

### 表单组件

```tsx
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";

// ✅ 正确用法
<div className="grid w-full max-w-sm items-center gap-1.5">
  <Label htmlFor="email">Email</Label>
  <Input type="email" id="email" placeholder="Email" />
</div>;
```

### 数据展示组件

```tsx
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";

// ✅ 统一卡片结构
<Card className="rounded-2xl shadow-md">
  <CardHeader>
    <CardTitle>标题</CardTitle>
  </CardHeader>
  <CardContent>内容区域</CardContent>
</Card>;
```

### 交互组件

```tsx
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from "@/components/ui/dialog";
import {
  AlertDialog,
  AlertDialogAction,
  AlertDialogCancel,
  AlertDialogContent,
  AlertDialogDescription,
  AlertDialogFooter,
  AlertDialogHeader,
  AlertDialogTitle,
  AlertDialogTrigger,
} from "@/components/ui/alert-dialog";
```

## 4. 样式扩展与自定义

### Tailwind 配置

```js
// tailwind.config.js
module.exports = {
  content: [
    "./pages/**/*.{ts,tsx}",
    "./components/**/*.{ts,tsx}",
    "./app/**/*.{ts,tsx}",
    "./src/**/*.{ts,tsx}",
  ],
  theme: {
    extend: {
      colors: {
        border: "hsl(var(--border))",
        input: "hsl(var(--input))",
        ring: "hsl(var(--ring))",
        background: "hsl(var(--background))",
        foreground: "hsl(var(--foreground))",
        primary: {
          DEFAULT: "hsl(var(--primary))",
          foreground: "hsl(var(--primary-foreground))",
        },
        // ... 其他颜色
      },
      borderRadius: {
        lg: "var(--radius)",
        md: "calc(var(--radius) - 2px)",
        sm: "calc(var(--radius) - 4px)",
      },
    },
  },
  plugins: [require("tailwindcss-animate")],
};
```

### 自定义组件类

```css
/* 项目特定的组件变体 */
.focus-card {
  @apply rounded-2xl shadow-md hover:shadow-lg transition-shadow duration-200;
}

.setting-card {
  @apply rounded-xl border bg-card text-card-foreground shadow;
}
```

## 5. 响应式设计规范

### 断点使用

- `sm`: 640px (小屏幕)
- `md`: 768px (平板)
- `lg`: 1024px (桌面)
- `xl`: 1280px (大屏桌面)
- `2xl`: 1536px (超大屏)

### 网格系统

```tsx
// ✅ 响应式网格
<div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
  {items.map(item => <Card key={item.id} />)}
</div>

// ✅ 侧边栏布局
<div className="grid lg:grid-cols-[240px_1fr] gap-6">
  <aside className="hidden lg:block">侧边栏</aside>
  <main>主内容</main>
</div>
```

## 6. 可访问性要求

### 语义化 HTML

- 使用正确的 ARIA 属性
- 确保键盘导航可用
- 提供适当的焦点指示器

### 颜色对比度

- 文本对比度至少 4.5:1 (WCAG AA)
- 重要信息不仅依赖颜色区分

### 屏幕阅读器支持

```tsx
// ✅ 添加 sr-only 文本
<Button>
  <TrashIcon className="h-4 w-4" />
  <span className="sr-only">删除</span>
</Button>
```

## 7. 性能优化

### 按需导入

```tsx
// ✅ 只导入需要的组件
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";

// ❌ 避免全量导入
import * as Components from "@/components/ui";
```

### 动态导入大型组件

```tsx
// 对于复杂图表或编辑器组件
const Chart = dynamic(() => import("@/components/ui/chart"), { ssr: false });
```

## 8. 开发约束

- 新建页面必须使用 Shadcn UI 组件
- 自定义样式优先使用 Tailwind 类
- 组件变体通过 `cva` (class-variance-authority) 管理
- 所有交互组件必须支持键盘操作
- 表单组件必须与 React Hook Form 兼容

## 9. 组件扩展示例

```tsx
// components/ui/data-table.tsx - 基于 Shadcn Table 的扩展
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from "@/components/ui/table";
import { Button } from "@/components/ui/button";

interface DataTableProps<T> {
  columns: ColumnDef<T>[];
  data: T[];
  pagination?: PaginationProps;
}

export function DataTable<T>({ columns, data, pagination }: DataTableProps<T>) {
  return (
    <div className="space-y-4">
      <Table>
        <TableHeader>{/* 表头 */}</TableHeader>
        <TableBody>{/* 表格内容 */}</TableBody>
      </Table>
      {pagination && <Pagination {...pagination} />}
    </div>
  );
}
```

## 10. 故障排除

### 常见问题

1. **样式不生效**: 检查 Tailwind 配置和 CSS 导入顺序
2. **主题切换失效**: 确认 `next-themes` 配置正确
3. **组件类型错误**: 更新 `@types/react` 到最新版本

### 调试工具

- 使用浏览器开发者工具检查 CSS 变量
- 利用 Tailwind CSS IntelliSense 插件
- 使用 `className-variance-authority` 调试组件变体
