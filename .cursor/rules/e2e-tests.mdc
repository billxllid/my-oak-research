---
description: Playwright 端到端测试规范（目录/环境/鉴权/数据种子/选择器/网络桩/追踪/CI）
globs:
  - "tests/e2e/**"
  - "apps/web/**"
  - "apps/worker/**"
alwaysApply: true
---

# Oak Research - Playwright 端到端测试规范

本规范统一 E2E 测试在本项目中的组织方式、登录鉴权、数据准备、选择器策略与 CI 集成，覆盖关注速报/报告编写/资料库/仪表盘/系统管理等核心路径。

## 1. 目录与命名

tests/e2e/

- auth/ 登录与权限
- focus-bulletin/ 关注速报
- report-writer/ 报告编写
- library/ 资料库
- dashboard/ 仪表盘
- admin/ 系统管理
- fixtures/ 通用 fixture 与数据种子
- utils/ 选择器/辅助方法

测试文件命名：`*.e2e.spec.ts`。每个模块入口文件 `index.e2e.spec.ts` 覆盖主 happy path。

## 2. 环境与启动

本地运行

- 使用 `docker-compose` 启动 Postgres（pgvector），并运行 `prisma migrate`
- 启动 web 与 worker 后再执行 `npx playwright test`

Playwright 配置（简要）

```ts
// tests/e2e/playwright.config.ts
import { defineConfig, devices } from "@playwright/test";
export default defineConfig({
  testDir: "./",
  timeout: 60_000,
  expect: { timeout: 5_000 },
  retries: 1,
  use: {
    baseURL: process.env.E2E_BASE_URL ?? "http://localhost:3000",
    trace: "on-first-retry",
    screenshot: "only-on-failure",
    video: "retain-on-failure",
    locale: "zh-CN",
  },
  projects: [
    { name: "chromium", use: { ...devices["Desktop Chrome"] } },
    { name: "webkit", use: { ...devices["Desktop Safari"] } },
  ],
});
```

## 3. 鉴权与测试账号

- 使用专用测试账号与固定权限集（如 `report:write`, `focus:config`）
- 登录首选 **前端真实登录流程**；为提速可使用已登录的 storageState
- 存储登录状态

```ts
// tests/e2e/auth/global.setup.ts
import { chromium } from "@playwright/test";
export default async () => {
  const browser = await chromium.launch();
  const page = await browser.newPage();
  await page.goto("/login");
  await page.getByLabel("用户名").fill("e2e_user");
  await page.getByLabel("密码").fill("e2e_password");
  await page.getByRole("button", { name: "登录" }).click();
  await page.context().storageState({ path: "tests/e2e/.auth/state.json" });
  await browser.close();
};
```

- 在 `playwright.config.ts` 的 `use.storageState` 指向 `state.json`

## 4. 数据种子与隔离

- 使用专门的 seed 脚本：`tests/e2e/fixtures/seed.ts` 调用 Prisma 写入最小数据
- 每个测试套件前执行 `seed:minimal`，套件后 `cleanup`
- 测试数据命名以 `E2E_*` 前缀，便于清理
- 严禁依赖生产数据或网络不稳定外部源

## 5. 选择器策略

- 首选 **可访问性选择器**（`getByRole`, `getByLabel`, `getByText`）
- 重要交互元素添加 `data-testid`，避免依赖结构/样式
- 禁止使用脆弱的 `nth-child` 与深层组合 CSS 选择器

示例

```ts
await page.getByRole("button", { name: "新建模板" }).click();
await page.getByTestId("keyword-input").fill("俄乌战争");
```

## 6. 网络桩与时间

- 对不确定外部依赖（LLM/第三方搜索）使用 `page.route()` 进行桩替换
- 对长任务（报告生成/向量化）使用后端 mock 或短路 API
- 时间相关断言使用相对断言（包含文本“分钟前/刚刚”），避免固定时间戳

## 7. 追踪与可观测性

- 失败保留 screenshot + video + trace
- CI 中将 `playwright-report/` 上传为构件
- 关键路径覆盖率：登录、速报筛选与收藏、报告生成与保存、知识库上传与检索、仪表盘渲染、系统管理增改删

## 8. 典型用例片段

关注速报收藏

```ts
test("收藏一条关注内容", async ({ page }) => {
  await page.goto("/focus-bulletin");
  const firstCard = page.getByTestId("focus-card").first();
  await firstCard.getByRole("button", { name: "收藏" }).click();
  await expect(page.getByText("已加入收藏")).toBeVisible();
});
```

报告生成（桩）

```ts
await page.route("**/api/report-writer/generate", (route) =>
  route.fulfill({
    json: { success: true, data: { title: "草稿", sections: [] } },
  })
);
```

## 9. CI 集成

- 在 CI 中并行运行多个浏览器项目
- 缓存 node_modules 与 Playwright 浏览器
- 失败重试一次；报告产出到 artifacts
