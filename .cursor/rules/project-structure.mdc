---
description: Next.js 15 项目结构规范与文件组织
globs:
  - "apps/web/**"
  - "packages/**"
alwaysApply: true
---

# Oak Research 项目结构规范

本规范约束 Oak Research 情报分析系统在 Turborepo + Next.js 15 下的目录和文件组织。  
开发时 Cursor 必须按照本规范生成/修改文件。

---

## 1. Monorepo 顶层结构

```

oak-research/
├── apps/
│   ├── web/                # Next.js 15 主应用 (UI + API routes)
│   └── worker/             # 后台 Worker 服务 (爬虫 / Agent / 调度任务)
│
├── packages/
│   ├── ui/                 # Shadcn + Tailwind 组件库 (Figma → React 封装)
│   ├── prisma/             # 数据库 schema 与生成的 client
│   ├── utils/              # 工具函数 (日志、缓存、加解密、格式化)
│   ├── config/             # 环境变量 / 配置
│   └── agents/             # AI Agent 逻辑 (关键词派生 / 多 Agent 协作)
│
├── tests/
│   ├── e2e/                # Playwright E2E 测试
│   └── unit/               # Vitest 单元测试
│
├── cursor-rules/           # Cursor 辅助开发规范
└── turbo.json              # Turborepo 配置

```

## 2. apps/web 结构

Next.js 15 (app router) 下页面和功能模块规范：

```

apps/web/
├── app/
│   ├── (dashboard)/        # 仪表盘功能
│   │   ├── layout.tsx      # 仪表盘布局 (左侧导航 + 右侧内容)
│   │   └── page.tsx        # 默认仪表盘首页
│   │
│   ├── (focus-bulletin)/   # 关注速报功能
│   │   ├── layout.tsx      # 子布局 (侧边栏 + 内容)
│   │   ├── page.tsx        # 默认关注内容展示
│   │   └── config/         # 关注配置页面
│   │       └── page.tsx
│   │
│   ├── (report-writer)/    # 报告编写功能
│   │   ├── layout.tsx
│   │   ├── page.tsx        # 报告编辑入口
│   │   ├── templates/      # 模板管理
│   │   │   └── page.tsx
│   │   └── manage/         # 报告管理
│   │       └── page.tsx
│   │
│   ├── (library)/          # 资料库
│   │   ├── layout.tsx
│   │   ├── knowledge/      # 知识库
│   │   │   └── page.tsx
│   │   └── favorites/      # 收藏夹
│   │       └── page.tsx
│   │
│   ├── (admin)/            # 系统管理
│   │   ├── users/          # 用户与权限管理
│   │   │   └── page.tsx
│   │   └── logs/           # 日志管理
│   │       └── page.tsx
│   │
│   ├── api/                # API Routes (仅小功能用，大逻辑在 worker)
│   │   └── ...
│   │
│   ├── layout.tsx          # 全局布局 (导航栏、侧边栏)
│   └── page.tsx            # 首页 (跳转到仪表盘)
│
├── components/             # UI 组件 (优先从 packages/ui 引入)
├── hooks/                  # React hooks
├── lib/                    # 本地工具函数 (仅前端用)
└── styles/                 # 全局样式

```

> 注意：每个 `(feature)/` 都有自己的 `layout.tsx`，Cursor 生成页面时必须自动套用对应布局。  
> UI 组件必须先尝试从 `packages/ui` 引入，若无再在 `apps/web/components/` 内实现。

---

## 3. apps/worker 结构

后台 worker 服务，主要做定时任务、爬虫和 LLM 调用：

```

apps/worker/
├── src/
│   ├── jobs/               # 定时任务 (抓取新闻 / 关键词监控)
│   ├── services/           # 与外部服务交互 (搜索引擎、代理、LLM API)
│   ├── pipelines/          # 内容清洗 / 分析 / 存储流程
│   ├── index.ts            # 启动入口
│   └── env.ts              # 环境变量加载

```

---

## 4. packages/ui 结构

统一的 UI 组件库，Cursor 生成组件时必须存放到此处（除非是页面专用组件）。

```

packages/ui/
├── components/
│   ├── form/               # 表单相关组件 (基于 RHF + Zod)
│   ├── card/               # 数据展示卡片 (速报卡片 / 报告卡片)
│   ├── markdown/           # Markdown 渲染组件
│   └── ...
├── index.ts                # 统一导出
└── tailwind.config.ts      # UI 层样式配置

```

---

## 5. 命名与约束

1. **文件命名**：

   - 页面文件：`page.tsx`
   - 布局文件：`layout.tsx`
   - API 文件：`route.ts`
   - 组件文件：PascalCase (`FocusCard.tsx`)
   - 工具函数：camelCase (`formatDate.ts`)

2. **路径规范**：

   - 引用 UI 组件：`import { FocusCard } from "@oak/ui/card"`
   - 引用 Prisma client：`import { prisma } from "@oak/prisma"`
   - 引用工具函数：`import { formatDate } from "@oak/utils/date"`

3. **Figma → React 规则**：
   - 所有 Figma 设计稿的组件必须先封装到 `packages/ui`。
   - 页面内不直接写复杂 UI，必须引入组件库。
   - Figma 标准的颜色、间距 → Tailwind class。

---

## 6. 开发建议

- 新功能 → 在 `apps/web/app/(feature)/` 下新建子路由 + layout
- 新 UI 组件 → 在 `packages/ui` 内创建，并在 `index.ts` 导出
- 数据逻辑 → worker → Prisma → React Query → UI
- Cursor 必须提示开发者：若页面内出现复杂组件，请先检查 `packages/ui` 是否已有实现
