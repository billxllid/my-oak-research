---
description: React Hook Form + Zod 表单实现规范
globs:
  - "apps/web/app/**"
  - "packages/ui/form/**"
alwaysApply: true
---

# Oak Research - 表单实现规范

本规范统一表单实现方式，要求所有表单均基于 React Hook Form (RHF) + Zod，避免随意使用 useState 或不一致的校验逻辑。

## 1. 基本要求

- 必须使用 RHF 控制表单状态
- 必须使用 Zod 进行 Schema 校验，并通过 `zodResolver` 绑定
- 所有输入控件必须从 `packages/ui/form/` 引入，以保持一致的样式与交互
- 表单必须具备：加载态、禁用态、错误提示、成功提示

## 2. 表单组织方式

- 每个页面内表单抽离为独立组件，存放在 `apps/web/app/<feature>/components/FormX.tsx`
- 通用表单组件存放在 `packages/ui/form/`
- 支持三种布局：垂直（默认）、水平（用于对话框）、内嵌（表格内编辑）

## 3. 表单 Schema 与类型

- Schema 必须定义在同文件或 `_schemas.ts`
- 导出类型供 Action 与 API 使用，避免类型漂移

```ts
import { z } from "zod";

export const CreateUserSchema = z.object({
  username: z.string().min(3).max(50),
  role: z.string().min(1),
  description: z.string().max(200).optional(),
});
export type TCreateUser = z.infer<typeof CreateUserSchema>;
```

## 4. 统一的 RHF 封装

在 `packages/ui/form/` 中封装基础组件：

- `<Form>`: 提供 context
- `<FormField>`: 单个字段绑定
- `<FormItem>`: Label + 控件 + 错误提示
- `<FormMessage>`: 错误信息展示

示例：

```tsx
<Form {...form}>
  <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-4">
    <FormField
      name="username"
      control={form.control}
      render={({ field }) => (
        <FormItem>
          <FormLabel>用户名</FormLabel>
          <Input {...field} placeholder="请输入用户名" />
          <FormMessage />
        </FormItem>
      )}
    />
    <Button type="submit" disabled={form.formState.isSubmitting}>
      提交
    </Button>
  </form>
</Form>
```

## 5. 校验与错误处理

- RHF 内部错误直接通过 `<FormMessage />` 渲染
- API 返回错误时，用 toast 展示，并高亮字段（若有 details）
- 所有表单提交必须防止重复提交：提交时按钮 `disabled`

## 6. 特殊表单控件规范

- **Select**：统一使用 Shadcn UI 的 `<Select>`，绑定 RHF
- **DatePicker**：封装为 `<DateField>`，支持 ISO string 输出
- **FileUpload**：使用 `packages/ui/form/FileUpload`，支持进度与大小限制
- **RichText/Markdown 编辑器**：统一封装 `<MarkdownEditorField>`

## 7. 响应式与可访问性

- 小屏：Label 在上方，控件占满宽度
- 错误提示需有 `aria-describedby` 关联
- 所有必填项必须在 Label 标记 `*`

## 8. 提交与反馈

- 成功提交：toast.success + 关闭对话框/跳转
- 失败提交：toast.error + 保留表单值
- 长耗时任务（>3s）：按钮显示 loading spinner

## 9. 开发约束

- 禁止在表单中直接使用 `<input>` `<select>`，必须用封装控件
- 表单 Schema 必须与 API DTO 保持一致
- Cursor 在生成表单代码时必须提示：请使用封装好的 `<FormField>`，而不是手写控件
